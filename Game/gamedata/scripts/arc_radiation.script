-- -*- mode: lua; encoding: windows-1251 -*-

DOSE_TIRING = 2500
DOSE_HARMFUL = 5000
DOSE_DEADLY = 35000

DOSE_DEC_DIV = 0.15

RAD_DOSE = 0

local last_anom_hit_time = 0
local detector_snd = false

local art_hits = {}

local arts_rad = 0
local anom_rad = 0
-----------------------------------------------------------------------------------
local inv_arts_radiation = 0
local arts_satiety = 0

local game_ms = 1000 / level.get_time_factor()

function change_arts_satiety(delta)
	arts_satiety = arts_satiety + delta
end

function change_inv_radiation(delta)
	inv_arts_radiation = inv_arts_radiation + delta
--	log("~ change_inv_radiation: delta = %f\n-  inv_arts_radiation = %f", delta, inv_arts_radiation)
end
-----------------------------------------------------------------------------------
local CONDITIONS_UPDATE_TIME = 100	-- real time ms
local f_update_time = 0
local update_time = 0

function on_actor_update(delta)
	this.update_radiation(delta)

	if game_options.HudRad then
		amk.oau_watchdog=30011
		amk.oau_reason="arc_ui_dosimeter.update"
		arc_ui_dosimeter.update(delta)
	end

	this.update_detector_sound(delta)
	ui_scroll_indicators.update_indicator( "radiation", "radiation_new", math.min( RAD_DOSE/DOSE_DEADLY, 1 ) )
end

function update_radiation(delta)
	if update_time < CONDITIONS_UPDATE_TIME then
		update_time = update_time + delta
		return
	end

	f_update_time = update_time*level.get_time_factor()/1000

	thirst.update(f_update_time)
	
	arc_inventory.on_actor_update()

	if arts_satiety ~= 0 then
		Actor.satiety = arts_satiety*f_update_time
	end

	local add_rad = 0
	if inv_arts_radiation ~= 0
		and not Actor:get_current_holder()
	then
		add_rad = inv_arts_radiation*f_update_time
	end
--	log("add_rad %s", tostring(add_rad))
	local r = Actor.radiation
	local d = r - 0.05
	this.mod_rad_dose(d*4000)
	Actor.radiation = add_rad - d

	if d > 0.000001 then
		local rp = arc_inventory.cur_rad_protection
		if arc_inventory.crp_changed or ( rp==0 and d>0.005 ) then
			anom_rad = d / ( 1 - rp )
			last_anom_hit_time = 0
		else
			table.insert( art_hits, 1, { time_since_hit = 0, hit_power = d } )
		end
	end

	if last_anom_hit_time>400 then
		anom_rad = 0
		last_anom_hit_time = 0
	else
		last_anom_hit_time = last_anom_hit_time + update_time
	end
	
	local i = 1
	local hits_time, hits_summ = 0, 0
	
	while art_hits[i] do
		local t = art_hits[i].time_since_hit + update_time
		
		if t > 200 then
			table.remove(art_hits, i)
		else
			hits_time = t
			hits_summ = hits_summ + art_hits[i].hit_power
			art_hits[i].time_since_hit = t
			i = i + 1
		end
	end
	
	arts_rad = (hits_time > 0) and ( hits_summ * 200 / hits_time ) or 0

	update_time = 0
end

function update_detector_sound(delta)
	if RAD_DOSE > DOSE_TIRING and arc_inventory.IsRadDetected() then
		if not detector_snd then
			detector_snd = table.copy({}, sound_theme.actor_theme.level_border_detector)
			detector_snd.next_time = -1
		end
		if detector_snd.next_time < 0 then
			table.random(detector_snd.sounds):play(Actor, 0, sound_object.s2d)
			local factor = 20*DOSE_TIRING/RAD_DOSE
			detector_snd.next_time = math.random(detector_snd.min_snd*factor, detector_snd.max_snd*factor)
		else
			detector_snd.next_time = detector_snd.next_time - delta
		end
	elseif detector_snd then
		detector_snd = nil
	end
end

function save_rad_dose()
	amk.save_variable("rad_dose", RAD_DOSE)
end
	
function get_rad_level()
	return (arts_rad + anom_rad) / 0.1
end

function get_dose_string()
	return string.format("%.2f", RAD_DOSE/100)
end

function get_dose_string_color()
	local rd = RAD_DOSE / DOSE_DEADLY
	return math.min(round(196+196*rd),255), math.max(round(255-255*rd),0), math.max(round(196-255*rd),0)
end

function add_rad_dose(dose_delta)
	RAD_DOSE = math.max( 0, RAD_DOSE+dose_delta )
	
	local rd
	rd = (RAD_DOSE > DOSE_HARMFUL) and (RAD_DOSE - DOSE_HARMFUL) / (DOSE_DEADLY - DOSE_HARMFUL) or 0
	if rd<1 then
		arc_health.set_health_threshold(1-rd*rd)
	else
		arc_health.set_health_threshold(1-math.pow(rd,6))
	end
	
	arc_health.set_psy_threshold(1-rd/3)
	
	rd = (RAD_DOSE > DOSE_TIRING) and (RAD_DOSE - DOSE_TIRING) / (DOSE_DEADLY - DOSE_TIRING) or 0
	
	arc_health.set_power_penalty(rd*1.5)
end

local last_dose = {}
function mod_rad_dose(dose_delta)
	if #last_dose == 2 then
		local mean = (table.remove(last_dose, 1) + last_dose[1] + dose_delta) /3
	--	log("mean %s", tostring(mean))
		if mean > 0.01 then
			arc_ui_dosimeter.fade(true)
		end
	end

	if dose_delta < 0 then
		dose_delta = dose_delta / DOSE_DEC_DIV
	end
	table.insert(last_dose, dose_delta)
	
	add_rad_dose(dose_delta)
end
-----------------------------------------------------------------------------------
function use_antirad(delta)
	add_rad_dose(delta*100)
end
-----------------------------------------------------------------------------------
function on_key_release(dik, bind)
	if bind == key_bindings.kSCORES then
		arc_ui_dosimeter.hide()
	end
end
-----------------------------------------------------------------------------------
local upd_time_tele = nil
function spawn_telepatic()
	if (upd_time_tele or 0) < time_global() then
		upd_time_tele = 1000 + time_global()
		
		local h = hit()
		h.draftsman = Actor
		h.direction = vector():set(0,0,0)
		h:bone("bip01_spine")
		h.type = hit.chemical_burn
		h.power = 0.01
		h.impulse = 50
		Actor:hit(h)          
		level.add_pp_effector("amk_shoot.ppe", 2011, false)
	end
end
-----------------------------------------------------------------------------------
function init()
	RAD_DOSE = amk.load_variable("rad_dose", 0)
end

function attach()
	xr_s.subscribe( "net_spawn",   this.init )
	xr_s.subscribe( "key_release", this.on_key_release )
	xr_s.subscribe( "pre_save",    this.save_rad_dose  )
end
