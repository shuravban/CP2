-- -*- mode: lua; encoding: windows-1251 -*-

-- APP: remove drop weapon during running and reload

local get_wnd = level.main_input_receiver
local binds_actions = {}
local dik_actions = {}

-- APP: На всякий случай и здесь 0.0 - если меньше, то уронит))
local DROP_ITEM_SPRINT_RND = 0.0

local keys = {
	[1]  = 'ESCAPE', [21] = 'Y',          [41] = 'GRAVE',     [61] = 'F3',       [81]  = 'NUMPAD3',      [151] = 'UNLABELED',   [221] = 'APPS',
	[2]  = '1',      [22] = 'U',          [42] = 'LSHIFT',    [62] = 'F4',       [82]  = 'NUMPAD0',      [156] = 'NUMPADENTER', [337] = 'MOUSE1',
	[3]  = '2',      [23] = 'I',          [43] = 'BACKSLASH', [63] = 'F5',       [83]  = 'DECIMAL',      [157] = 'RCONTROL',    [338] = 'MOUSE2',
	[4]  = '3',      [24] = 'O',          [44] = 'Z',         [64] = 'F6',       [87]  = 'F11',          [179] = 'NUMPADCOMMA',
	[5]  = '4',      [25] = 'P',          [45] = 'X',         [65] = 'F7',       [88]  = 'F12',          [181] = 'DIVIDE',
	[6]  = '5',      [26] = 'LBRACKET',   [46] = 'C',         [66] = 'F8',       [100] = 'F13',          [183] = 'SYSRQ',
	[7]  = '6',      [27] = 'RBRACKET',   [47] = 'V',         [67] = 'F9',       [101] = 'F14',          [184] = 'RMENU',
	[8]  = '7',      [28] = 'RETURN',     [48] = 'B',         [68] = 'F10',      [102] = 'F15',          [197] = 'PAUSE',
	[9]  = '8',      [29] = 'LCONTROL',   [49] = 'N',         [69] = 'NUMLOCK',  [112] = 'KANA',         [199] = 'HOME',
	[10] = '9',      [30] = 'A',          [50] = 'M',         [70] = 'SCROLL',   [121] = 'CONVERT',      [200] = 'UP',
	[11] = '0',      [31] = 'S',          [51] = 'COMMA',     [71] = 'NUMPAD7',  [123] = 'NOCONVERT',    [201] = 'PRIOR',
	[12] = 'MINUS',  [32] = 'D',          [52] = 'PERIOD',    [72] = 'NUMPAD8',  [125] = 'YEN',          [203] = 'LEFT',
	[13] = 'EQUALS', [33] = 'F',          [53] = 'SLASH',     [73] = 'NUMPAD9',  [141] = 'NUMPADEQUALS', [205] = 'RIGHT',
	[14] = 'BACK',   [34] = 'G',          [54] = 'RSHIFT',    [74] = 'SUBTRACT', [144] = 'CIRCUMFLEX',   [207] = 'END',
	[15] = 'TAB',    [35] = 'H',          [55] = 'MULTIPLY',  [75] = 'NUMPAD4',  [145] = 'AT',           [208] = 'DOWN',
	[16] = 'Q',      [36] = 'J',          [56] = 'LMENU',     [76] = 'NUMPAD5',  [146] = 'COLON',        [209] = 'NEXT',
	[17] = 'W',      [37] = 'K',          [57] = 'SPACE',     [77] = 'NUMPAD6',  [147] = 'UNDERLINE',    [210] = 'INSERT',
	[18] = 'E',      [38] = 'L',          [58] = 'CAPITAL',   [78] = 'ADD',      [148] = 'KANJI',        [211] = 'DELETE',
	[19] = 'R',      [39] = 'SEMICOLON',  [59] = 'F1',        [79] = 'NUMPAD1',  [149] = 'STOP',         [219] = 'LWIN',
	[20] = 'T',      [40] = 'APOSTROPHE', [60] = 'F2',        [80] = 'NUMPAD2',  [150] = 'AX',           [220] = 'RWIN'
}

function bind2key(bind)
	return keys[bind_to_dik(bind)]
end
function dik2key(dik)
	return keys[dik]
end

-------------------------------------------------------------------------------------------
-- фикс смены типа гранаты
local grenades = {
	"grenade_rgd5",
	"grenade_f1",
	"grenade_f1_double",
	"grenade_m61",
	"grenade_7643b",
	"grenade_he",
	"grenade_sg",
	"grenade_fb",
	"grenade_gd-05",
	"grenade_flash",
	"yadrena_bomba"
}
local sect2pos = {}
for i, v in ipairs(grenades) do
	sect2pos[v] = i
end

function switch_grenade()
	if not Actor:alive() then return end

--[[
	if actor_active_item and Actor:is_actor_sprinting() then
		if math.random() < DROP_ITEM_SPRINT_RND then
			Actor:drop_item(actor_active_item)
			return
		end
	end
--]]

	if Actor:active_slot() ~= inventory_slots.GRENADE then
		reload_shotgun()
		return
	end

	local itm = Actor:item_in_slot( inventory_slots.GRENADE )
	if itm == nil then
		for k,v in pairs( grenades ) do
			itm = Actor:object(v)
			if itm then
				Actor:move_to_slot_and_activate( itm )
				break
			end
		end
		return
	end

	local sect = itm:section()
	local pos = sect2pos[sect]
	if not pos then
		log( "! %s:grenade_change : unregistered grenade section [%s]", script_name(), sect )
		table.insert( grenades, sect )
		pos = #grenades
		sect2pos[ sect ] = pos
	end

	local n = #grenades
	for i = pos, pos + n - 2 do
		local j = math.fmod( i, n ) + 1
		local gr = Actor:object( grenades[j] )
		if gr then
			Actor:move_to_ruck( itm )
			Actor:move_to_slot_and_activate( gr )
			break
		end
	end
end

function reload_shotgun()
	if actor_active_item and actor_active_item:clsid() == clsid.wpn_shotgun_s then
		-- if actor_active_item:get_ammo_in_magazine() < sys_ini:r_u32(actor_active_item:section(), "ammo_mag_size") then
			-- return
		-- end

		local t_ammo = sys_ini:r_list(actor_active_item:section(), "ammo_class")
		local cnt = 0
		for i, v in ipairs(t_ammo) do
			if Actor:object(v) then
				cnt = cnt + 1
			end
		end
		if cnt < 2 then return end

		local ammo_ids = bind_sg.get_ammo_ids(actor_active_item:id())
		local spawn = {}
		for i, v in ipairs(ammo_ids) do
			table.add(spawn, t_ammo[v+1])
		end
		for s, n in pairs(spawn) do
			se_respawn.create_ammo(s, vector():set(0,0,0), 0, 0, 0, n)
		end

		actor_active_item:unload_magazine()
	end
end

function use_from_slot(n)
	if not Actor:alive() then return end

	local slots = ui_inv_add.getSlots()
	local s = slots[n]
	if s then
		local item = Actor:object(s)
		if item then
			Actor:eat(item)
			show_use_item(s)
		end
	end
end

function show_use_item(section)
	local st = get_hud():AddCustomStatic( "item_used", true )
	st:wnd():SetText( "Использовано: "..game.translate_string( get_inv_name( section ) ) )
	st.m_endTime = time_global()/1000 + 4
end


-------------------------------------------------------------------------------------------
-- Групповой перенос предметов в/из нычки/трупа
local carbody_addons, used_box

function on_use(obj, who)
	if obj:clsid() == clsid.inventory_box or obj:alive() == false then
		used_box = obj
	end
end

function clear_used_box()
	used_box = nil
end

-------------------------------------------------------------------------------------------
class "CUICarbodyAddons" (CUIScriptWnd)

function CUICarbodyAddons:__init(owner) super()
	self.owner = owner
	self.used_box = nil

	self:InitControls()
	self:Show(true)

	xr_s.subscribe( "car_body_open", self.car_body_open, {self = self} )
	xr_s.subscribe( "car_body_close", self.car_body_close, {self = self} )
end

function CUICarbodyAddons:ShowOthersWeight()
	if self.others_weight == nil then
		self.others_weight = 0
		local box = self.used_box
		if box:clsid() == clsid.inventory_box then
			local item
			for i = 0, box:inv_box_count()-1 do
				item = box:object_from_inv_box(i)
				self.others_weight = self.others_weight + item:get_weight()
			end
		else
			box:iterate_inventory(
				function (dummy, item)
					self.others_weight = self.others_weight + item:get_weight()
				end,
			nil)
		end
	end

	self.others_weight = math.max(self.others_weight, 0)
	self.weight_st:SetText( string.format("%.02f кг", self.others_weight) )
end

function CUICarbodyAddons:InitControls()
	self:Init(0,0,1024,768)
	self:Enable(true)

	local xml = CScriptXmlInit()
	xml:ParseFile("carbody_addons.xml")

	self:Register(xml:Init3tButton("move_btn", self), "move_btn")
	self.owner:AttachChild(self)
	self:AddCallbackEx("move_btn", ui_events.BUTTON_CLICKED, self.move_items)

	self.weight_st = xml:InitStatic("others_weight", self)
	
	self.DescrWnd = ui_inv_descr.CUIDescriptionWnd(self)
end

function CUICarbodyAddons:Remove()
	self.DescrWnd:Remove()
	self.DescrWnd = nil
	self:ClearCallbacks()
	self.owner:DetachChild(self)
	self.owner = nil
	self.used_box = nil

	xr_s.unsubscribe( "car_body_open", self.car_body_open )
	xr_s.unsubscribe( "car_body_close", self.car_body_close )
end

function CUICarbodyAddons:move_items()
	if self.moved then return end
	self.moved = true

	local box = self.used_box
	if not box then return end

	local sobj
	if self.droped_section then
		local box_id = box:id()
		Actor:iterate_inventory(function (dummy, item)
			if item:section() == self.droped_section then
				sobj = AI:object(item:id())
				if sobj and sobj.parent_id ~= box_id then
					Actor:transfer_item(item, box)
				end
			end 
		end, nil)

	elseif self.taken_section then
		if box:clsid()==clsid.inventory_box then
			local item
			for i=0, box:inv_box_count()-1 do
				item = box:object_from_inv_box(i)
				if item:section() == self.taken_section then
					sobj = AI:object(item:id())
					if sobj and sobj.parent_id ~= 0 then
						box:transfer_item(item, Actor)
					end
				end
			end
		else
			box:iterate_inventory(function (dummy, item)
				if item:section() == self.taken_section then
					sobj = AI:object(item:id())
					if sobj and sobj.parent_id ~= 0 then
						box:transfer_item(item, Actor)
					end
				end 
			end, nil)
		end
	end

	self.droped_section = nil
	self.taken_section = nil
	start_small_timer(300,
		function(s)
			s.moved = nil
		end,
	self)
end

function CUICarbodyAddons:on_item_drop(obj)
	self.droped_section = obj:section()
	self.taken_section = nil

	self.others_weight = self.others_weight + obj:get_weight()
	self:ShowOthersWeight()

	if ShiftPressed() then
		self:move_items()
	end
end

function CUICarbodyAddons:on_item_take(obj)
	self.taken_section = obj:section()
	self.droped_section = nil

	self.others_weight = self.others_weight - obj:get_weight()
	self:ShowOthersWeight()

	if ShiftPressed() then
		self:move_items()
	end
end

function CUICarbodyAddons:car_body_open()
	self.used_box = used_box
	self.others_weight = nil
	self:ShowOthersWeight()

	xr_s.subscribe("item_take", self.on_item_take, {self = self} )
	xr_s.subscribe("item_drop", self.on_item_drop, {self = self} )
	
	self.DescrWnd:subscribe()

	bind_actor.hide_weapon("carbody")
end

function CUICarbodyAddons:car_body_close()
	xr_s.unsubscribe( "item_take", self.on_item_take )
	xr_s.unsubscribe( "item_drop", self.on_item_drop )
	self.DescrWnd:unsubscribe()

	local box = self.used_box
	if box:clsid() == clsid.inventory_box then
		akill.check_habar_in_box1(box)
		dunin_ammo.repack_in_box(box)
	end
	self.used_box = nil

	bind_actor.restore_weapon("carbody")
end


-- Поломка и износ холодного оружия
local time_shift = time_global()
local wpn_power	= {
	['wpn_kuvalda']	= true,
	['wpn_crowbar']	= true,
	['wpn_topor']	= true,
	['wpn_machete'] = true,
	['wpn_kukri']	= true
}
function steel_arms()
	if not Actor:alive() then return end
	if Actor:active_slot() ~= inventory_slots.KNIFE then return end
	if time_shift > time_global() then return end
	
	if actor_active_item == nil then return end
	-- длительность анимации получить нельзя - будем считать "на глаз"
	time_shift = time_global() + 750
	
	local sec = actor_active_item:section()
	-- Усталость от махания железякой
	-- все ножи не проверяем, только самое тяжелое
	local dif = level.get_game_difficulty() + 1
	if wpn_power[sec] then
		Actor.power = - dif * actor_active_item:get_weight() * 0.01
	end

	if level.get_target_dist() > sys_ini:r_float(sec, "fire_distance") + 0.1 then return end

	local d = sys_ini:r_float(sec, "condition_shot_dec")
	this.knife_deterioration(actor_active_item, dif * d)
end

function knife_deterioration(obj, dec)
	local cond = obj:condition() - dec
	obj:set_condition(cond)
--	log("# knife_deterioration: [%s] cond -> %s", obj:section(), cond)
	if cond < 0.04 then
		start_small_timer(200, function() kostya_dialog.remove_wpn(obj:id()) end)
	end
end
-------------------------------------------------------------------------------------------
-- runner/returner
function run_or_return()
	if not Actor:alive() then return end
	if ShiftPressed() then
		this.set_input_key()
	elseif inventory.on_belt("runner_tele") then
		fly.runner()
	else
		fly.returner()
	end
end
function set_input_key()
	local func_yes = function()
		xr_s.subscribe( "key_press", this.wait_key, { once = true } )
	end
	ShowMessageBox( "yes_no_alarm", "st_set_input_key", func_yes )
end
function wait_key( dik, bind )
	if bind ~= key_bindings.DUMMY then
		local func = function()
			xr_s.subscribe( "key_press", this.wait_key, { once = true } )
		end
		ShowMessageBox( "ok_red", "st_set_input_key_fail", func )
		return
	end
	dik_actions[game_options.RunnerKey] = nil
	dik_actions[dik] = hotkeys.run_or_return
	game_options.RunnerKey = dik
	game_options.save_game_options()
	local dik_name = this.dik2key( dik )
	local msg = format_text_pairs(
		game.translate_string("st_set_input_key_done"),
		{dik_name = dik_name}
	)
	ShowMessageBox( "ok_info", msg )
end
-------------------------------------------------------------------------------------------
binds_actions[key_bindings.kWPN_FIRE] = hotkeys.steel_arms
binds_actions[key_bindings.kWPN_ZOOM] = hotkeys.steel_arms
binds_actions[key_bindings.kWPN_NEXT] = hotkeys.switch_grenade
binds_actions[key_bindings.kNIGHT_VISION] = function()
	if not Actor:alive() then return end
	bind_torch.switch_pnv()
end
binds_actions[key_bindings.kUSE_BANDAGE] = function() use_from_slot(2) end
binds_actions[key_bindings.kUSE_MEDKIT] = function() use_from_slot(1) end
binds_actions[key_bindings.kEXT_1] = function() use_from_slot(3) end
binds_actions[key_bindings.kCAM_4] = function() use_from_slot(4) end
binds_actions[key_bindings.kQUICK_SAVE] = function()
	u3_utils.on_quick_save()
end
binds_actions[key_bindings.kQUICK_LOAD] = function()
	u3_utils.load_quicksave()
end
binds_actions[key_bindings.kSCORES] = function()
	if not Actor:alive() then return end
	if device():is_paused() then return end
	reminder.start_remind()
	if game_options.HudRad then
		arc_ui_dosimeter.show()
	end
end
binds_actions[key_bindings.kTORCH] = function()
	if not Actor:alive() then return end
	local torch = Actor:item_in_slot( inventory_slots.TORCH )
	if torch and torch:section() == "device_torch" then
		local snd = xr_sound.get_safe_sound_object("zwuk\\inv_torch")
		snd:play_no_feedback(Actor, sound_object.s2d, 0, vector(), 0.7)
	end
end
--[[ APP
binds_actions[key_bindings.kWPN_RELOAD] = function()
	if not Actor:is_actor_sprinting() then return end
	if math.random() > DROP_ITEM_SPRINT_RND then return end
	if actor_active_item and isMagazinedWeapon(actor_active_item) then
		if actor_active_item:get_ammo_in_magazine() == sys_ini:r_u32(actor_active_item:section(), "ammo_mag_size") then
			return
		end
		Actor:drop_item(actor_active_item)
	end
end

binds_actions[key_bindings.kWPN_FUNC] = function()
	if not Actor:is_actor_sprinting() then return end
	if math.random() > DROP_ITEM_SPRINT_RND then return end
	if actor_active_item and actor_active_item:is_weapon_gl() then
		Actor:drop_item(actor_active_item)
	end
end
--]]

dik_actions[game_options.RunnerKey] = hotkeys.run_or_return
dik_actions[DIK_keys.DIK_F10] = function()
	if not Actor:alive() then return end
	ui_console.show_console()
end
dik_actions[DIK_keys.DIK_J] = function()
	_G['naxac_test'] = nil
	naxac_test.ggg()
end

local ui_binds = {
	[key_bindings.kACTIVE_JOBS] = "ui_pda",
	[key_bindings.kMAP]         = "ui_pda",
	[key_bindings.kCONTACTS]    = "ui_pda",
	[key_bindings.kINVENTORY]   = "ui_inventory"
}

function on_key(dik, bind)
	if get_wnd()~=nil then
		if ui_binds[bind] then
			if ui_binds[bind] == "ui_inventory" then
				local w = level.get_pda_wnd()
				if w and w:IsShown() then
					level.start_stop_menu(w)
				end
			else
				local w = level.get_inventory_wnd()
				if w and w:IsShown() then
					level.start_stop_menu(w)
				end
			end
		end
		return
	end
	
	if binds_actions[bind] then
		binds_actions[bind]()
	end
	if dik_actions[dik] then
		dik_actions[dik]()
	end
end

function on_net_spawn()
	local cb_wnd = level.get_car_body_wnd()
	if cb_wnd then
		carbody_addons = CUICarbodyAddons(cb_wnd)
	end
end
function on_net_destroy()
	local cb_wnd = level.get_car_body_wnd()
	if cb_wnd and carbody_addons then
		carbody_addons:Remove()
	end
	carbody_addons = nil
end

function attach()
	xr_s.subscribe("first_update", this.on_net_spawn)
	xr_s.subscribe("net_destroy", this.on_net_destroy)
	xr_s.subscribe("key_press", this.on_key)
    xr_s.subscribe("npc_use", this.on_use)
end
